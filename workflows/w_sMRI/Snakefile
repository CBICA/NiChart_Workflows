## Import packages
import pandas as pd

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
#localrules:

### Report data
#report: "report/workflow.rst"

## Config file
configfile: "../../config/config_Test1.yaml"

## Read SPARE model paths
df_tmp = pd.read_csv('../../config/' + config['list_SPARE_models'], index_col = 'Model')
DICT_SPARE = df_tmp.Path.to_dict()

#print(DICT_SPARE)
#input()

###################################
## Out file names

#OUT_CONFIG = expand("../../data/{dir_output}/config/{cname}", cname = ["config_prep_data.yaml",  config["list_covars"], config["list_ROIs"], config["list_studies_merge"]], dir_output = config["dir_output"])

#OUT_RESULTS = expand("../../data/{dir_output}/combined/combined_{dtype}_{ctype}.csv", dtype = config["roi_types"], ctype = config["corr_types"], dir_output = config["dir_output"])

#OUT_FILES = OUT_CONFIG + OUT_RESULTS

OUT_FILES = ["../../data/NiChart_Study1/Study1/harmonized/Study1_MUSE_raw_COMBAT.csv"]
OUT_FILES = ["../../data/NiChart_Study1/Study1/spare/Study1_MUSE_raw_COMBAT_SPARE-AD.csv"]
#"../../data/{dir_output}/{study}/harmonized/{study}_{dtype}.csv"

print("Target out files:" + '\n' + '\n'.join(OUT_FILES) + '\n')

###################################
## Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: OUT_FILES

rule copy_config:
    '''
    Rule for copying config files to output dir
    '''
    input:
        "../../config/{cname}"
    output:
        expand("../../data/{dir_output}/config/{{cname}}", dir_output = config["dir_output"])
    shell:
        "cp -v {input} {output}"

rule rename_rois:
    '''
    Rename MUSE roi indices to roi codes
    '''
    input:
        roi=expand("../../data/{dir_input}/{{study}}/{{study}}_{{dtype}}.csv", dir_input = config["dir_input"]),
        dict=expand("../../config/{rois}", rois = config["list_ROIs_all"])
    output:
        "../../data/{dir_output}/{study}/renamed/{study}_{dtype}.csv"
    params:
        var_from = 'Index',
        var_to = 'Code'
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_rename_df_columns.py {input} {params} {output}"

ruleorder: merge_covars_to_rois > merge_covars_to_corr_rois

rule merge_covars_to_rois:
    '''
    Merge covars to ROIs
    '''
    input:
        covar=expand("../../data/{dir_input}/{{study}}/{{study}}_Demog.csv", dir_input = config["dir_input"]),
        roi="../../data/{dir_output}/{study}/renamed/{study}_{dtype}.csv",
    params:
        key_var = 'MRID'
    output:
        "../../data/{dir_output}/{study}/combined/{study}_{dtype}_raw.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_merge_dfs.py {input} {params} {output}"

rule correct_icv:
    '''
    Normalize ROIs. Values are scaled either by a constant factor (NormICV) or 100 (PercICV)
    '''
    input:
        "../../data/{dir_output}/{study}/renamed/{study}_{dtype}.csv"
    params:
        icv_var = 'MUSE_702',
        exclude_vars = 'MRID',
        suffix = 'NONE'
    output:
        "../../data/{dir_output}/{study}/corr_rois/{study}_{dtype}_{corr_type}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_corr_icv.py {input} {wildcards.corr_type} {params} {output}"


rule merge_covars_to_corr_rois:
    '''
    Merge covars to ROIs
    '''
    input:
        covar=expand("../../data/{dir_input}/{{study}}/{{study}}_Demog.csv", dir_input = config["dir_input"]),
        roi="../../data/{dir_output}/{study}/corr_rois/{study}_{dtype}_{ctype}.csv"
    params:
        key_var = 'MRID'
    output:
        "../../data/{dir_output}/{study}/combined/{study}_{dtype}_{ctype}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_merge_dfs.py {input} {params} {output}"

rule select_vars_harmonize:
    '''
    Select variables for harmonization
    '''
    input:
        in_csv="../../data/{dir_output}/{study}/combined/{study}_{dtype}.csv",
        dict_csv=expand("../../config/{rois}", rois = config["list_ROIs_selected"])
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,SITE,DLICV',
    output:
        "../../data/{dir_output}/{study}/sel_vars/{study}_{dtype}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_select_vars.py {input} {params} {output}"

rule filter_age_harmonize:
    '''
    Check that sample has age range consistent with the model
    '''
    input:
        "../../data/{dir_output}/{study}/sel_vars/{study}_{dtype}.csv",
    params:
        var_name='Age',
        min_val='50',
        max_val='95',
    output:
        "../../data/{dir_output}/{study}/filtered_data/{study}_{dtype}.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_filter_num_var.py {input} {params} {output}"

rule combat_apply:
    input:
        data="../../data/{dir_output}/{study}/filtered_data/{study}_{dtype}.csv",
        mdl=expand("../../models/{model}", model = config["model_combat"])
    output:
        csv="../../data/{dir_output}/{study}/harmonized/{study}_{dtype}_COMBAT_init.csv"
    shell:
        "bash ../../utils/util_combat_test.sh {input} {output}"

rule remove_COMBAT_suffix:
    '''
    Remove COMBAT suffix (_HARM)
    FIXME: Ideally COMBAT should be run with an arg to create output var names without a suffix
    '''        
    input:
        "../../data/{dir_output}/{study}/harmonized/{study}_{dtype}_COMBAT_init.csv"
    params:
        rm_suff='_HARM'
    output:
        "../../data/{dir_output}/{study}/harmonized/{study}_{dtype}_COMBAT_renamed.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_remove_suffix.py {input} {params} {output}"

rule select_harmonized_roi_vars:
    '''
    Select variables from harmonized data
    '''
    input:
        in_csv="../../data/{dir_output}/{study}/harmonized/{study}_{dtype}_COMBAT_renamed.csv",
        in_dict=expand("../../config/{rois}", rois = config["list_ROIs_selected"])
    params:
        dict_var = 'Code',
        vars_list = 'MRID',
    output:
        "../../data/{dir_output}/{study}/harmonized/{study}_{dtype}_COMBAT_rois.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_select_vars.py {input} {params} {output}"

rule merge_covars_to_harmonized_rois:
    '''
    Merge covars to ROIs
    '''
    input:
        covar=expand("../../data/{dir_input}/{{study}}/{{study}}_Demog.csv", dir_input = config["dir_input"]),
        roi="../../data/{dir_output}/{study}/harmonized/{study}_{dtype}_COMBAT_rois.csv"
    params:
        key_var = 'MRID'
    output:
        "../../data/{dir_output}/{study}/harmonized/{study}_{dtype}_COMBAT.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_merge_dfs.py {input} {params} {output}"

rule select_vars_spare:
    '''
    Select variables for harmonization
    '''
    input:
        in_csv="../../data/{dir_output}/{study}/harmonized/{study}_{dtype}_COMBAT.csv",
        dict_csv=expand("../../config/{rois}", rois = config["list_ROIs_selected"])
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,DLICV',
    output:
        "../../data/{dir_output}/{study}/spare/{study}_{dtype}_COMBAT.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/util_select_vars.py {input} {params} {output}"

def get_spare_model(wildcards):
    path_spare='../../models/' + DICT_SPARE[wildcards.stype]
    return path_spare

rule spare_apply:
    input:
        data="../../data/{dir_output}/{study}/spare/{study}_{dtype}_COMBAT.csv",
        mdl=get_spare_model
    output:
        data="../../data/{dir_output}/{study}/spare/{study}_{dtype}_COMBAT_SPARE-{stype}.csv"
    shell:
        "bash ../../utils/util_spare_test.sh {input} {output}"

#rule spare_combine:
    #input:
        #data=expand("../../data/{{study}}/SPARE/{{study}}_{dtype}_{stype}.csv", dtype = ['raw', 'normICV'], stype = ['C_AD-ISTAG', 'C_V-Diabetes', 'C_V-Hypertension', 'R_V-Age']) 
    #output:
        #csv="../../data/{study}/output_long/{study}_SPARE-Scores.csv"
    #shell:
        #"echo python utils/util_combine_spare.py {output} {input}; "
        #"python utils/util_combine_spare.py {output} {input}"

##################################    
### Create summary output
#rule prep_compact_output:
    #'''
    #Merge demog data to DLMUSE
    #'''
    #input:
        #rois="../../config/list_MUSE_primaryROI.csv",
        #demog="../../data/{study}/Lists/{study}_Demog.csv",
        #data="../../data/{study}/output_long/{study}_DLMUSE_raw.csv",
        #datanorm="../../data/{study}/output_long/{study}_DLMUSE_normICV.csv",
        #dataharm="../../data/{study}/merged_combat/{study}_raw_combatAgeSexICV.csv",
        #datanormharm="../../data/{study}/merged_combat/{study}_normICV_combatAgeSex.csv",
        #spare="../../data/{study}/output_long/{study}_SPARE-Scores.csv"
    #output:
        #"../../data/{study}/output_compact/{study}_sMRI_All.csv"
    #params:
        #key_var = 'MRID'
    #shell:
        #"echo python utils/util_combine_all.py {output} {input}; "
        #"python utils/util_combine_all.py {output} {input}"




