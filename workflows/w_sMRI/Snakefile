
#import pandas as pd

#report: "report/workflow.rst"

#configfile: "../../config/config.yaml"

### Get list of studies (from data folder)
#LIST_STUDIES = glob_wildcards("../../data/{study}/Lists/{study2}_Demog.csv").study

#df_tmp = pd.read_csv(config["list_SPARE"])
#LIST_SPARE = df_tmp.Model.tolist()

###################################
## Rules
rule ALL:
    #input:expand("../../data/{study}/data_prep_spare/{study}_{dtype}_combat{ctype}_merged.csv", study=['AIBL'], dtype=['normICV'], ctype=['AgeSex'])
    #input:expand("../../data/{study}/output_long/{study}_SPARE-Scores.csv", study = LIST_STUDIES)
    #
    input:expand("../../data/{study}/merged_combat/{study}_raw_combatAgeSexICV.csv", study = LIST_STUDIES)
    #input:expand("../../data/{study}/output_compact/{study}_sMRI_All.csv", study = LIST_STUDIES)

rule rename_rois:
    '''
    Rename DLMUSE columns
    '''
    input:
        roi="../../data/{study}/DLMUSE/{study}_DLMUSE.csv",
        dict="../../config/list_MUSE_allROI.csv"
    output:
        "../../data/{study}/output_long/{study}_DLMUSE_raw.csv"
    shell:
        "python utils/util_rename_columns.py {input} {output}"

#################################    
## ICV Correction

rule corr_icv:
    '''
    Normalize ROIs. Values are scaled either by a constant factor (NormICV) or 100 (PercICV)
    '''
    input:
        "../../data/{study}/output_long/{study}_DLMUSE_raw.csv"
    output:
        "../../data/{study}/output_long/{study}_DLMUSE_normICV.csv"
    params:
        icv_var = 'ICV',
        exclude_vars = 'MRID',
        suffix = 'NONE'
    shell:
        "echo python utils/util_corr_icv.py {input} normICV {params} {output}; "
        "python utils/util_corr_icv.py {input} normICV {params} {output}"

#################################    
## Harmonization
        
rule merge_with demog:
    '''
    Merge demog data to DLMUSE
    '''
    input:
        demog="../../data/{study}/Lists/{study}_Demog.csv",
        data="../../data/{study}/output_long/{study}_DLMUSE_{dtype}.csv",
    output:
        temp("../../data/{study}/data_prep_harm/{study}_DLMUSE_{dtype}_merged.csv")
    params:
        key_var = 'MRID'
    shell:
        "echo python utils/util_merge_data.py {output} {params} {input}; "
        "python utils/util_merge_data.py {output} {params} {input}"

rule select_vars_harmonize:
    input:
        data="../../data/{study}/data_prep_harm/{study}_DLMUSE_{dtype}_merged.csv",
        rois="../../config/list_MUSE_{rtype}.csv",
    params:
        vars='MRID,Age,Sex,SITE,ICV'
    output:
        temp("../../data/{study}/data_prep_harm/{study}_DLMUSE_{dtype}_merged_hdata_{rtype}.csv")
    shell:
        "echo python utils/util_select_vars_harmonize.py {input} {params} {output};"
        "python utils/util_select_vars_harmonize.py {input} {params} {output};"

rule combat_apply_raw:
    input:
        data="../../data/{study}/data_prep_harm/{study}_DLMUSE_raw_merged_hdata_{rtype}.csv",
        mdl="../../models/harmonization/NiChartData_raw_{rtype}_combatAgeSexICV_Model.pkl.gz",
    output:
        csv=temp("../../data/{study}/harmonization/{study}_raw_{rtype}_combatAgeSexICV.csv")
    shell:
        "echo neuroharm -a apply -i {input.data} -m {input.mdl} -u {output.csv}; "
        "neuroharm -a apply -i {input.data} -m {input.mdl} -u {output.csv}"
        
rule combat_raw_selectroi:
    input:
        data="../../data/{study}/harmonization/{study}_raw_{rtype}_combatAgeSexICV.csv",
        rois="../../config/list_MUSE_{rtype}.csv",
    output:
        csv="../../data/{study}/output_long/{study}_raw_{rtype}_combatAgeSexICV.csv"
    shell:
        "echo python utils/util_selvars_harm.py {input} {output}; "
        "python utils/util_selvars_harm.py {input} {output}; "

rule combat_apply_normICV:
    input:
        data="../../data/{study}/data_prep_harm/{study}_DLMUSE_normICV_merged_hdata_{rtype}.csv",
        mdl="../../models/harmonization/NiChartData_normICV_{rtype}_combatAgeSex_Model.pkl.gz",
    output:
        csv=temp("../../data/{study}/harmonization/{study}_normICV_{rtype}_combatAgeSex.csv")
    shell:
        "echo neuroharm -a apply -i {input.data} -m {input.mdl} -u {output.csv};"
        "neuroharm -a apply -i {input.data} -m {input.mdl} -u {output.csv}"

rule combat_normICV_selectroi:
    input:
        data="../../data/{study}/harmonization/{study}_normICV_{rtype}_combatAgeSex.csv",
        rois="../../config/list_MUSE_{rtype}.csv",
    output:
        csv="../../data/{study}/output_long/{study}_normICV_{rtype}_combatAgeSex.csv"
    shell:
        "echo python utils/util_selvars_harm.py {input} {output}; "
        "python utils/util_selvars_harm.py {input} {output}; "

rule combat_merge_rois:
    input:
        data2="../../data/{study}/output_long/{study}_{dtype}_compositeROI_combat{ctype}.csv",
        data1="../../data/{study}/output_long/{study}_{dtype}_singleROI_combat{ctype}.csv",
    params:
        key_var='MRID'
    output:
        "../../data/{study}/merged_combat/{study}_{dtype}_combat{ctype}.csv",
    shell:
        "echo python utils/util_merge_two.py {input} {params} {output}; "
        "python utils/util_merge_two.py {input} {params} {output}; "

#################################    
## SPARE

rule prep_data_spare:
    '''
    Merge demog data
    '''
    input:
        demog="../../data/{study}/Lists/{study}_Demog.csv",
        data="../../data/{study}/output_long/{study}_{dtype}.csv",
        icv="../../data/{study}/output_long/{study}_DLMUSE_raw.csv",
    output:
        temp("../../data/{study}/data_prep_spare/{study}_{dtype}_merged.csv")
    params:
        key_var = 'MRID'
    shell:
        "echo python utils/util_merge_data_spare.py {output} {params} {input}; "
        "python utils/util_merge_data_spare.py {output} {params} {input}"

rule spare_apply_raw_harm:
    input:
        data="../../data/{study}/data_prep_spare/{study}_raw_singleROI_combatAgeSexICV_merged.csv",
        mdl="../../models/SPARE/SPARE_{stype}_NiChartData_raw_singleROI_combatAgeSexICV_model.pkl.gz"
    output:
        csv=temp("../../data/{study}/SPARE/{study}_raw_{stype}.csv")
    params:
        vkey='MRID',
    shell:
        "echo spare_score -a test -i {input.data} -m {input.mdl} -o {output.csv}; "
        "spare_score -a test -i {input.data} -m {input.mdl} -o {output.csv}"

rule spare_apply_normICV_harm:
    input:
        data="../../data/{study}/data_prep_spare/{study}_normICV_singleROI_combatAgeSex_merged.csv",
        #mdl="../../models/SPARE/SPARE-{smodel}_model.pkl.gz",
        mdl="../../models/SPARE/SPARE_C_AD-ISTAG_NiChartData_normICV_singleROI_combatAgeSex_model.pkl.gz"
    output:
        csv=temp("../../data/{study}/SPARE/{study}_normICV_{stype}.csv")
    params:
        vkey='MRID',
    shell:
        "echo spare_score -a test -i {input.data} -m {input.mdl} -o {output.csv}; "
        "spare_score -a test -i {input.data} -m {input.mdl} -o {output.csv}"

rule spare_combine:
    input:
        data=expand("../../data/{{study}}/SPARE/{{study}}_{dtype}_{stype}.csv", dtype = ['raw', 'normICV'], stype = ['C_AD-ISTAG', 'C_V-Diabetes', 'C_V-Hypertension', 'R_V-Age']) 
    output:
        csv="../../data/{study}/output_long/{study}_SPARE-Scores.csv"
    shell:
        "echo python utils/util_combine_spare.py {output} {input}; "
        "python utils/util_combine_spare.py {output} {input}"

#################################    
## Create summary output
rule prep_compact_output:
    '''
    Merge demog data to DLMUSE
    '''
    input:
        rois="../../config/list_MUSE_primaryROIs.csv",
        demog="../../data/{study}/Lists/{study}_Demog.csv",
        data="../../data/{study}/output_long/{study}_DLMUSE_raw.csv",
        datanorm="../../data/{study}/output_long/{study}_DLMUSE_normICV.csv",
        dataharm="../../data/{study}/merged_combat/{study}_raw_singleROI_combatAgeSexICV.csv",
        datanormharm="../../data/{study}/merged_combat/{study}_normICV_singleROI_combatAgeSex.csv",
        spare="../../data/{study}/output_long/{study}_SPARE-Scores.csv"
    output:
        temp("../../data/{study}/output_compact/{study}_sMRI_All.csv")
    params:
        key_var = 'MRID'
    shell:
        "echo python utils/util_combine_all.py {output} {input}; "
        "python utils/util_combine_all.py {output} {input}"




