## Import packages
import pandas as pd

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
#localrules:

### Report data
#report: "report/workflow.rst"

## Config file
configfile: "../../config/vTest1/config.yaml"

###################################
## Read config vars and lists

dir_input = config["dir_input"]
dir_output = config["version"]
derived_rois = config["list_derived_ROIs"]
rois = config["list_ROIs_all"]
rois_single = config["list_ROIs_single"]
rois_primary = config["list_ROIs_primary"]
spare_types = config["SPARE_types"]
model_combat = config["model_combat"]
corr_type = config["corr_type"]

#df = pd.read_csv("../../config/" + config["list_studies_merge"])
#LIST_STUDIES = df.Study.tolist()


###################################
## Set out file names

#OUT_CONFIG = expand("../../data/{dir_output}/config/{cname}", cname = ["config_prep_data.yaml",  config["list_covars"], config["list_ROIs"], config["list_studies_merge"]], dir_output = dir_output)

#OUT_RESULTS = expand("../../data/{dir_output}/combined/combined_{dtype}_{ctype}.csv", dtype = rois, ctype = corr_type, dir_output = dir_output)

#OUT_FILES = OUT_CONFIG + OUT_RESULTS

OUT_FILES = ["../../data/vTest1/Study1/harmonized/Study1_MUSE_raw_COMBAT.csv"]
OUT_FILES = ["../../data/vTest1/Study1/spare/Study1_MUSE_raw_COMBAT_SPARE-AD.csv"]

OUT_FILES = ["../../data/vTest1/Study1/harmonized/Study1_DLMUSE_raw_COMBAT.csv"]

#OUT_FILES = ["../../data/vTest1/Study1/spare/Study1_DLMUSE_raw_COMBAT.csv"]

#OUT_FILES = ["../../data/vTest1/Study1/spare/Study1_DLMUSE_raw_COMBAT_SPARE-AD.csv"]

#OUT_FILES = ["../../data/vTest1/Study1/out_data/Study1_SPARE-AD.csv"]


OUT_FILES = ["../../data/vTest1/Study1/out_data/Study1_DLMUSE_raw_SPARE-Scores.csv"]

OUT_FILES = ["../../data/vTest1/Study1/harmonized/Study1_DLMUSE_raw_COMBAT_all.csv"]

OUT_FILES = ["../../data/vTest1/Study1/out_rois/Study1_DLMUSE_normICV.csv"]
#OUT_FILES = ["../../data/vTest1/Study1/out_rois/Study1_DLMUSE_raw.csv"]
OUT_FILES = ["../../data/vTest1/Study1/combined/Study1_DLMUSE_normICV.csv"]

OUT_FILES = ["../../data/vTest1/Study1/out_spare/Study1_SPARE-AD.csv"]

OUT_FILES = ["../../data/vTest1/Study1/out_spare/Study1_DLMUSE_raw_COMBAT_SPARE-Scores.csv"]

OUT_FILES = ["../../data/vTest1/Study1/out_combined/Study1_DLMUSE_VIEWED.csv"]


#"../../data/{dir_output}/{study}/harmonized/{study}_{dtype}.csv"

#print("Target out files:" + '\n' + '\n'.join(OUT_FILES) + '\n')

###################################
## Rules

rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: OUT_FILES

rule copy_config:
    '''
    Rule for copying config files to output dir
    '''
    input:
        "../../config/{cname}"
    output:
        f"../../data/{dir_output}/config/{{cname}}"
    shell:
        "cp -v {input} {output}"

rule rename_rois:
    '''
    Rename MUSE roi indices to roi codes
    '''
    input:
        roi=f"../../data/{dir_input}/{{study}}/{{study}}_{{dtype}}.csv",
        dict=f"../../config/{rois}"
    output:
        f"../../data/{dir_output}/{{study}}/out_rois/{{study}}_{{dtype}}_raw.csv"
    params:
        var_from = 'Index',
        var_to = 'Code'
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_rename_df_columns.py {input} {params} {output}"

rule correct_icv:
    '''
    Normalize ROIs. Values are scaled either by a constant factor (NormICV) or 100 (PercICV)
    '''
    input:
        f"../../data/{dir_output}/{{study}}/out_rois/{{study}}_{{dtype}}_raw.csv"
    params:
        icv_var = 'MUSE_702',
        exclude_vars = 'MRID',
        suffix = 'NONE'
    output:
        f"../../data/{dir_output}/{{study}}/out_rois/{{study}}_{{dtype}}_{corr_type}.csv"
    resources:
        mem_mb=8000
    shell:
        f"python ../../utils/generic/util_corr_icv.py {{input}} {corr_type} {{params}} {{output}}"

rule merge_covars:
    '''
    Merge covars to ROIs
    '''
    input:
        covar=f"../../data/{dir_input}/{{study}}/{{study}}_Demog.csv",
        roi=f"../../data/{dir_output}/{{study}}/out_rois/{{study}}_{{dtype}}.csv",
    params:
        key_var = 'MRID'
    output:
        temp(f"../../data/{dir_output}/{{study}}/combined/{{study}}_{{dtype}}.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule select_vars_harmonize:
    '''
    Select variables for harmonization
    '''
    input:
        in_csv=f"../../data/{dir_output}/{{study}}/combined/{{study}}_{{dtype}}_raw.csv",
        dict_csv=f"../../config/{rois_single}"
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,SITE,DLICV',
    output:
        temp(f"../../data/{dir_output}/{{study}}/sel_vars/{{study}}_{{dtype}}_raw.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_select_vars.py {input} {params} {output}"

rule filter_age_harmonize:
    '''
    Check that sample has age range consistent with the model
    '''
    input:
        f"../../data/{dir_output}/{{study}}/sel_vars/{{study}}_{{dtype}}.csv",
    params:
        var_name='Age',
        min_val='50',
        max_val='95',
    output:
        temp(f"../../data/{dir_output}/{{study}}/filtered_data/{{study}}_{{dtype}}.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_filter_num_var.py {input} {params} {output}"

rule combat_apply:
    input:
        data=f"../../data/{dir_output}/{{study}}/filtered_data/{{study}}_{{dtype}}.csv",
        mdl=f"../../models/{model_combat}"
    output:
        f"../../data/{dir_output}/{{study}}/out_combat/{{study}}_{{dtype}}_COMBAT_single.csv"
    shell:
        "bash ../../utils/combat/util_combat_test.sh {input} {output}"

rule calc_derived_ROIs:
    '''
    Calculate derived ROIs from harmonized data
    - If the input data already includes derived ROIs, they will not be updated
    '''        
    input:
        in_csv=f"../../data/{dir_output}/{{study}}/out_combat/{{study}}_{{dtype}}_COMBAT_single.csv",
        dict=f"../../config/{derived_rois}"
    params:
        key_var='MRID',
        roi_prefix='MUSE_'
    output:
        f"../../data/{dir_output}/{{study}}/out_combat/{{study}}_{{dtype}}_COMBAT_all.csv"
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_combine_MUSE_rois.py {input} {params} {output}"

rule merge_covars_to_harmonized_rois:
    '''
    Merge covars to ROIs
    '''
    input:
        covar=f"../../data/{dir_input}/{{study}}/{{study}}_Demog.csv",
        roi=f"../../data/{dir_output}/{{study}}/out_combat/{{study}}_{{dtype}}_COMBAT_single.csv"
    params:
        key_var = 'MRID'
    output:
        temp(f"../../data/{dir_output}/{{study}}/spare/{{study}}_{{dtype}}_COMBAT_withcovar.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_merge_dfs.py {input} {params} {output}"

rule select_vars_spare:
    '''
    Select variables for harmonization
    '''
    input:
        in_csv=f"../../data/{dir_output}/{{study}}/spare/{{study}}_{{dtype}}_COMBAT_withcovar.csv",
        dict_csv=f"../../config/{rois_single}"
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,DLICV',
    output:
        temp(f"../../data/{dir_output}/{{study}}/spare/{{study}}_{{dtype}}_COMBAT.csv")
    resources:
        mem_mb=8000
    shell:
        "python ../../utils/generic/util_select_vars.py {input} {params} {output}"

def get_spare_model(wildcards):
    model_name = config["model_SPARE-" + wildcards.stype]
    path_spare='../../models/' + model_name
    return path_spare

rule spare_apply:
    input:
        data=f"../../data/{dir_output}/{{study}}/spare/{{study}}_{{dtype}}_COMBAT.csv",
        mdl=get_spare_model
    output:
        temp(f"../../data/{dir_output}/{{study}}/out_spare/{{study}}_{{dtype}}_COMBAT_SPARE-{{stype}}.csv")
    shell:
        "bash ../../utils/generic/util_spare_test.sh {input} {wildcards.stype} {output}"

def get_spare_results(wildcards):
    data_spare=expand(f"../../data/{dir_output}/{{study}}/out_spare/{{study}}_{{dtype}}_COMBAT_SPARE-{{stype}}.csv", study = wildcards.study, dtype = wildcards.dtype, stype = spare_types)
    return data_spare

rule spare_combine:
    input:
        get_spare_results
    output:
        csv=f"../../data/{dir_output}/{{study}}/out_spare/{{study}}_{{dtype}}_COMBAT_SPARE-Scores.csv"
    shell:
        "python ../../utils/generic/util_merge_dfs_multi.py {output} MRID {input}"

rule prep_output:
    '''
    Merge demog data to DLMUSE
    '''
    input:
        demog=f"../../data/{dir_input}/{{study}}/{{study}}_Demog.csv",
        rois=f"../../config/{rois_primary}",
        out_raw=f"../../data/{dir_output}/{{study}}/out_rois/{{study}}_{{dtype}}_raw.csv",
        out_corr=f"../../data/{dir_output}/{{study}}/out_rois/{{study}}_{{dtype}}_{corr_type}.csv",
        out_harm=f"../../data/{dir_output}/{{study}}/out_combat/{{study}}_{{dtype}}_raw_COMBAT_all.csv",
        out_spare=f"../../data/{dir_output}/{{study}}/out_spare/{{study}}_{{dtype}}_raw_COMBAT_SPARE-Scores.csv"
    output:
        f"../../data/{dir_output}/{{study}}/out_combined/{{study}}_{{dtype}}_All.csv"
    params:
        key_var = 'MRID'
    shell:
        "python ../../utils/generic/util_combine_all.py {output} {input}"

rule launch_viewer:
    '''
    Launch the viewer with the output file
    '''
    input:
        f"../../data/{dir_output}/{{study}}/out_combined/{{study}}_{{dtype}}_All.csv"
    output:
        touch(f"../../data/{dir_output}/{{study}}/out_combined/{{study}}_{{dtype}}_VIEWED.csv")
    shell:
        "NiChartViewer --data {input}"
